spring.application.name=booking-service
server.port=8087

#mongodb database properties
spring.data.mongodb.host=localhost
spring.data.mongodb.port=27025
spring.data.mongodb.database=booking-service
spring.data.mongodb.username=admin
spring.data.mongodb.password=password
spring.data.mongodb.authentication-database=admin

#During Localhost
room.service.url = http://localhost:8083
user.service.url = http://localhost:8084

#during Docker
#room.service.url = http://room-service:8083

# webbased documentation -- http://localhost:8087/swagger-ui
springdoc.swagger-ui.path=/swagger-ui
#json based documentation --http://localhost:8087/api-docs
springdoc.api-docs.path=/api-docs

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
resilience4j.circuitbreaker.instances.room.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.room.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.room.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.room.slidingWindowSize=10
resilience4j.circuitbreaker.instances.room.failureRateThreshold=50
resilience4j.circuitbreaker.instances.room.waitDurationInOpenState=3s
resilience4j.circuitbreaker.instances.room.permittedNumberOfCallsInHalfOpenState=5
resilience4j.circuitbreaker.instances.room.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.timelimiter.instances.room.timeout-duration=3s
resilience4j.circuitbreaker.instances.room.minimum-number-of-calls=5
resilience4j.retry.instances.room.max-attempts=3
resilience4j.retry.instances.room.wait-duration=2s

#kafka properties
spring.kafka.bootstrap-servers=localhost:9092
#default topic where message will be sent if explicitly not specifies
spring.kafka.template.default-topic=booking-done
#seriliser class used for serialising the key for kafka messages
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
#spring.kafka.producer.properties.schema.registry.url=http://localhost:8081
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#serialiser class used for serialising the Json values of messages
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:ca.gbc.bookingservice.event.BookingEvent