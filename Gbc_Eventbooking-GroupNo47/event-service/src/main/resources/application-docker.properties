
spring.application.name=event-service

# Tomcat port for event-service
server.port=8092

# MongoDB configuration
spring.data.mongodb.uri=mongodb://admin:password@mongo-event:27017/event-service?authSource=admin

room.service.url = http://room-service:8090
user.service.url = http://user-service:8091

# Web-based documentation
springdoc.swagger-ui.path=/swagger-ui
# JSON-based documentation
springdoc.api-docs.path=/api-docs


spring.kafka.bootstrap-servers=broker:29092
#default topic where message will be sent if explicitly not specifies
spring.kafka.consumer.group-id=event-service
#seriliser class used for serialising the key for kafka messages
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
#spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=io.confluent.kafka.serializers.KafkaDeSerializer
#spring.kafka.consumer.properties.spring.deserializer.key.delegate.class=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.properties.schema.registry.url=http://schema-registry:8081
#spring.kafka.consumer.properties.specific.avro.reader=true
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#serialiser class used for serialising the Json values of messages
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.type.mapping=event:ca.gbc.eventservice.event.BookingEvent
# will ensure consumer starts processing all unprocessed events
spring.kafka.consumer.auto-offset-reset=earliest


#mailtrap.io
spring.mail.host=sandbox.smtp.mailtrap.io
spring.mail.port=2525
spring.mail.username=d0a070ef0fac85
spring.mail.password=7da13411cafe9b